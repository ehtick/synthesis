syntax = "proto3";

package SynthesisAPI.Proto;

enum DynamicType {
    FIELD = 0;
    SIM = 1;
    GAMEPIECE = 2;
}

message Assembly {
    oneof File {
        DynamicStatic field = 1;
    }
}

message DynamicStatic {
    string name = 1;
    AssemblyData assemblyData = 2;
    bool static = 3;
    map<string, string> userData = 4;
}

message AssemblyData {
    // occurrenceMap["Size 4 Joint:2"] = Occurrence
    // occurrenceMap["Size 4 Joint:1"] = Occurrence
    map<string, Occurrence> occurrenceMap = 1;

    // occurrenceMap["Size 4 Joint"] = Component
    map<string, Component> componentMap = 2;

    // jointMap["Rev1"] = Joint
    map<string, Joint> jointMap = 3;

    // materialMap[""]
    map<string, Material> materialMap = 4;
}

message Occurrence {
    string name = 1;
    string GUID = 7;
    string parent = 9;


    // ["Size 4 Joint"]
    // componentMap["Size 4 Joint"] = Component
    string componentRef = 2;

    Spatial transform = 3;
    
    // string material = 4;

    bool isGrounded = 4;
    bool static = 6;
    
    // ["Rev1", "Rev2", ...]
    // jointMap["Rev1"] = Joint
    // jointMap["Rev2"] = Joint
    repeated string joints = 5;

    repeated string children = 8;
}

message Component {
    string name = 5;
    string GUID = 1;

    Spatial transform = 3; // this might not exist
    PhysProps physicalProperties = 4;

    repeated Body bodies = 2;
}

message Joint {
    Vec3 axis = 1;
    Vec3 anchor = 2;

    float massScale = 7;

    bool useLimits = 8;
    bool isWheel = 9;

    oneof joint {
        RotationalJoint rotationalJoint = 10;
        OtherJoint otherJoint = 11;
    }

    JointMotor motor = 12;
    
    string occurrence1 = 13;
    string occurrence2 = 14;
}

message Body {
    string GUID = 1;
    string name = 6;
    string material = 2;
    Mesh visualMesh = 3;
    // Legacy_Mesh legacyMeshData = 4; // Get rid of I think?
    Spatial transform = 5;
}

message Mesh {
    repeated Vec3 vertices = 1;
    repeated int32 triangles = 2;
}

message Legacy_Mesh {
    repeated Sphere sphereColliders = 12;
}

message Sphere {
    Vec3 center = 1;
    float radius = 2;
}

message RotationalJoint {
    float currentAngle = 3;
    float lowerLimit = 4;
    float upperLimit = 5;

    enum ProtoWheelType {
        NORMAL = 0;
        OMNI = 1;
        MECANUM = 2;
    }

    ProtoWheelType wheelType = 10;
}

message JointMotor {
    float maxSpeed = 1;
    float torque = 2;
    bool useBreak = 3;
}

message OtherJoint {
    float massScale = 2;
}

message PhysProps {
    float mass = 1;
    Vec3 centerOfMass = 2;
    float dynamicFriction = 4;
    float staticFriction = 5;
}

message Material {
    int32 red = 1;
    int32 green = 2;
    int32 blue = 3;
    int32 alpha = 4;
    float specular = 5;
    bool emissive = 6;
    float roughness = 7;

    // if texture mapping comes into play
    // create map
}

message Vec3 {
    float x = 1;
    float y = 2;
    float z = 3;
}

message Quat {
    float x = 1;
    float y = 2;
    float z = 3;
    float w = 4;
}

message Spatial {
    repeated float matrix = 1; // this will store exactly 16 values always
}
